---

- name: Update apt cache
  apt:
    update_cache: true
    cache_valid_time: 86400
  when: ansible_os_family == 'Debian'

- name: Gather | os info
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_os_family }}.yaml"
  tags: vars

- name: CHN Server storage
  file:
    path: "{{ chn_server_storage_path }}"
    state: directory
  with_items:
    - "{{ chn_server_storage_path }}"
    - "{{ chn_server_storage_path }}/collector"
    - "{{ chn_server_storage_path }}/database"
    - "{{ chn_server_storage_path }}/tls"

- name: Install system level packages
  package:
    name: "{{ item }}"
  with_items: "{{ global_packages + os_packages }}"
  register: pkg_res
  retries: 5
  until: pkg_res is success

- name: Install python modules
  pip:
    name: docker

- name: Enable docker
  service:
    name: docker
    enabled: true
    state: started

- name: Install python modules
  pip:
    name: docker

- name: Flush Handlers to get docker restarted
  meta: flush_handlers

- name: Pull in dependant images
  docker_image:
    name: "stingar/{{ item }}:{{ chn_version_tag }}"
  with_items:
    - "mongodb"
    - "redis"
    - "hpfeeds"
    - "mnemosyne"

- name: Pull in chn-server image
  docker_image:
    name: "stingar/{{ item }}:{{ chn_version_tag }}"
  with_items:
    - "mongodb"
    - "redis"
    - "hpfeeds"
    - "mnemosyne"
    - "chn-server"
  when: not chn_build_images

- name: Build Images
  include_tasks: build_images.yaml
  when: chn_build_images

- name: Deploy MongoDB Container
  docker_container:
    name: mongodb
    image: stingar/mongodb:{{ chn_version_tag }}
    state: started
    restart_policy: always
    volumes:
      - /var/lib/mongo
  tags:
    - docker

- name: Deploy Redis Container
  docker_container:
    name: redis
    image: stingar/redis:{{ chn_version_tag }}
    state: started
    restart_policy: always
    volumes:
      - /var/lib/redis
  tags:
    - docker

- name: Deploy HPFeeds Container
  docker_container:
    name: hpfeeds
    image: stingar/hpfeeds:{{ chn_version_tag }}
    state: started
    restart_policy: always
    links:
      - "mongodb:mongodb"
    ports:
      - "10000:10000"
  tags:
    - docker

- name: Deploy Mnemosyne Container
  docker_container:
    name: mnemosyne
    image: stingar/mnemosyne:{{ chn_version_tag }}
    state: started
    restart_policy: always
    links:
      - "mongodb:mongodb"
      - "hpfeeds:hpfeeds"
  tags:
    - docker

- name: Copy in password changer
  copy:
    src: chn_password_reset.py
    dest: "{{ chn_server_storage_path }}/chn_password_reset.py"

- name: Deploy CHN Container
  docker_container:
    name: chnserver
    image: stingar/chn-server:{{ chn_version_tag }}
    state: started
    restart_policy: always
    env:
      CERTIFICATE_STRATEGY: "{{ chn_certificate_strategy }}"
    links:
      - "mongodb:mongodb"
      - "hpfeeds:hpfeeds"
      - "redis:redis"
    volumes:
      - "{{ chn_server_storage_path }}/collector:/etc/collector"
      - "{{ chn_server_storage_path }}/database:/opt/sqlite"
      - "{{ chn_server_storage_path }}/chn_logs:/var/log"
      - "{{ chn_server_storage_path }}/chn_password_reset.py:/opt/chn_password_reset.py"
      - "{{ chn_server_storage_path }}/certs:/certs"
    ports:
      - '80:80'
      - '443:443'
  tags:
    - docker

- name: Init the database (or at least try)
  shell: "docker exec -t chnserver bash -c 'cd /opt && python /opt/initdatabase.py'"
  args:
    creates: "{{ chn_server_storage_path }}/db_init_set"
    chdir: "/opt"
  ignore_errors: true

- name: Include hpfeeds-cif
  include_tasks: hpfeeds_cif.yaml
  when: cif_host
